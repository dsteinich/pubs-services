<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="mpPublication">

    <resultMap id="result" type="MpPublication" extends="publication.result">
        <result property="lockUsername" column="lock_username"/>
        <collection property="costCenters" column="publication_id" select="mpPublicationCostCenter.getByPublication"/>
        <collection property="authors" column="publication_id" select="mpPublicationContributor.getAuthorsByPublication"/>
        <collection property="editors" column="publication_id" select="mpPublicationContributor.getEditorsByPublication"/>
        <collection property="links" column="publication_id" select="mpPublicationLink.getByPublication"/>
    </resultMap>

    <sql id="cols">
        <include refid="publication.cols"/>,
        lock_username
    </sql>

    <sql id="hosts">
        <include refid="publication.hosts"/>,
        #{lockUsername,jdbcType=VARCHAR}
    </sql>

    <sql id="sets">
        <include refid="publication.sets"/>,
        lock_username = #{lockUsername,jdbcType=VARCHAR}
    </sql>

    <select id="getNewProdId" resultType="Integer">
        select publication_seq.nextval id from dual
    </select>

    <sql id="singleSearchTermFilter">
    <!-- single search term needs to or/and correctly -->
       	<if test="searchTerms != null and searchTerms.length > 0">
       		and 
			<foreach item="term" collection="searchTerms" open=""
					 separator="and" close=""> 
				(<include refid="publication.singleSearchTermFilter"/>
				<!--  contributing office -->
				 or exists (select null
                 	  	      from mp_pub_cost_center
                  		           join affiliation
                 	        	     on cost_center_id = affiliation_id
                 	    	 where mp_publication.publication_id = mp_pub_cost_center.publication_id and
             	        	       upper(name) <include refid="publication.likeTerm"/>
                           )
               
               <!-- author -->
                or exists (select null
                   	         from mp_pub_contributor
                   	              join contributor
                   	                on mp_pub_contributor.contributor_id = contributor.contributor_id 
               	            where mp_publication.publication_id = mp_pub_contributor.publication_id and
                 	         	  (upper(family) <include refid="publication.likeTerm"/> or
                 	         	   upper(given) <include refid="publication.likeTerm"/> or
                 	         	   upper(literal) <include refid="publication.likeTerm"/>
                 	         	  )
                 	      )
              )
			</foreach>
       	</if>
    </sql>
    
    <sql id="filters">
    	<where>
	    	<include refid="mpPublication.singleSearchTermFilter"/>
	    	<include refid="publication.filters"/>
	
			<if test="null != listId">
				<if test="listId.length > 0">
					<foreach item="list" collection="listId" open=" and publication_id in (select publication_id from mp_list_publication where mp_list_id in(" separator="," close="))">
						#{list,jdbcType=NUMERIC}
					</foreach>
				</if>
			</if>

            <if test="contributor != null and contributor.length > 0">
                and exists (select null
                   	          from mp_pub_contributor
                   	               join contributor
                   	                 on mp_pub_contributor.contributor_id = contributor.contributor_id 
               	             where mp_publication.publication_id = mp_pub_contributor.publication_id and
                				   <foreach item="a" collection="contributor" open="(" separator="or" close=")"> 
		                			   upper(family) like '%' || upper(#{a}) || '%' or
		                			   upper(given) like '%' || upper(#{a}) || '%' or
		                			   upper(literal) like '%' || upper(#{a}) || '%'
		                		   </foreach>
		                   )
            </if>
            
            <if test="contributingOffice != null and contributingOffice.length > 0">
                and exists (select null
                   	          from mp_pub_cost_center
                   	               join affiliation
                   	                 on mp_pub_cost_center.cost_center_id = affiliation.affiliation_id 
               	             where mp_publication.publication_id = mp_pub_cost_center.publication_id and
                				   <foreach item="co" collection="contributingOffice" open="(" separator="or" close=")"> 
		                			   upper(name) like '%' || upper(#{co}) || '%'
		                		   </foreach>
		                   )
            </if>
		</where>
    </sql>

    <insert id="add" parameterType="MpPublication">
        insert into mp_publication (<include refid="cols"/>)
             values (<include refid="hosts"/>)
    </insert>

    <insert id="copyMpFromPw" parameterType="Integer">
        insert into mp_publication (<include refid="publication.cols"/>)
            (select <include refid="publication.cols"/>
               from publication
              where publication_id = #{value,jdbcType=NUMERIC})
    </insert>

    <sql id="baseSelect">
        select <include refid="cols"/>
          from mp_publication
    </sql>

    <select id="getById" parameterType="Integer" resultMap="result">
        <include refid="baseSelect"/>
           where publication_id = #{value,jdbcType=VARCHAR}
    </select>

    <select id="getByMap" parameterType="map" resultMap="result">
        <include refid="base.pagingTop"/>
        <include refid="baseSelect"/>
        <include refid="filters"/>
        <include refid="base.orderBy"/>
        <include refid="base.pagingBottom"/>
    </select>

    <select id="getCount" parameterType="map" resultType="Integer">
        select count(*)
          from mp_publication
        <include refid="filters"/>
    </select>

    <update id="update" parameterType="MpPublication">
        update mp_publication
           set <include refid="sets"/>
           where publication_id = #{id,jdbcType=NUMERIC}
    </update>

    <update id="lockPub" parameterType="Integer">
    	update mp_publication
           set lock_username = <include refid="base.clientId"/>,
               <include refid="base.auditSets"/>
         where publication_id = #{value,jdbcType=NUMERIC}
    </update>

    <sql id="releaseLocks">
        update mp_publication
           set lock_username = null,
               <include refid="base.auditSets"/>
    </sql>

    <update id="releaseLocksUser" parameterType="String">
        <include refid="releaseLocks"/>
           where lock_username = #{value,jdbcType=VARCHAR}
    </update>

    <update id="releaseLocksPub" parameterType="Integer">
        <include refid="releaseLocks"/>
           where publication_id = #{value,jdbcType=NUMERIC}
    </update>

    <update id="publish" parameterType="Integer">
        merge into publication pw
            using (select <include refid="publication.cols"/>
                     from mp_publication
                    where publication_id = #{value,jdbcType=NUMERIC}) mp
               on (mp.publication_id = pw.publication_id)
             when matched then update
                  set pw.index_id                  = mp.index_id,
					  pw.display_to_public_date    = mp.display_to_public_date,
					  pw.publication_year          = mp.publication_year,
					  pw.publication_type_id       = mp.publication_type_id,
					  pw.publication_subtype_id    = mp.publication_subtype_id,
					  pw.publication_series_id     = mp.publication_series_id,
					  pw.series_number             = mp.series_number,
					  pw.subseries_title           = mp.subseries_title,
					  pw.chapter                   = mp.chapter,
					  pw.subchapter                = mp.subchapter,
					  pw.title                     = mp.title,
					  pw.abstract                  = mp.abstract,
					  pw.larger_work_type_id       = mp.larger_work_type_id,
					  pw.larger_work_title         = mp.larger_work_title,
					  pw.larger_work_subtype_id    = mp.larger_work_subtype_id,
					  pw.conference_title          = mp.conference_title,
					  pw.conference_date           = mp.conference_date,
					  pw.conference_location       = mp.conference_location,
					  pw.language                  = mp.language,
					  pw.publisher                 = mp.publisher,
					  pw.publisher_location        = mp.publisher_location,
					  pw.doi_name                  = mp.doi_name,
					  pw.issn                      = mp.issn,
					  pw.isbn                      = mp.isbn,
					  pw.collaboration             = mp.collaboration,
					  pw.usgs_citation             = mp.usgs_citation,
					  pw.contact_id                = mp.contact_id,
					  pw.product_description       = mp.product_description,
					  pw.start_page                = mp.start_page,
					  pw.end_page                  = mp.end_page,
					  pw.number_of_pages           = mp.number_of_pages,
					  pw.online_only               = mp.online_only,
					  pw.additional_online_files   = mp.additional_online_files,
					  pw.temporal_start            = mp.temporal_start,
					  pw.temporal_end              = mp.temporal_end,
					  pw.notes                     = mp.notes,
					  pw.ipds_id                   = mp.ipds_id,
					  pw.ipds_review_process_state = mp.ipds_review_process_state,
					  pw.ipds_internal_id          = mp.ipds_internal_id,
					  pw.scale                     = mp.scale,
					  pw.projection                = mp.projection,
					  pw.datum                     = mp.datum,
					  pw.country                   = mp.country,
					  pw.state                     = mp.state,
					  pw.county                    = mp.county,
					  pw.city                      = mp.city,
					  pw.other_geospatial          = mp.other_geospatial,
					  pw.geographic_extents        = mp.geographic_extents,
					  pw.volume                    = mp.volume,
					  pw.issue                     = mp.issue,
                      pw.insert_date               = mp.insert_date,
                      pw.insert_username           = mp.insert_username,
                      pw.update_date               = sysdate,
                      pw.update_username           = audit_trail_util.get_username
             when not matched then insert (<include refid="publication.cols"/>)
                  values (mp.publication_id, 		mp.index_id,				mp.display_to_public_date,		mp.publication_year,
                          mp.publication_type_id,	mp.publication_subtype_id,	mp.publication_series_id,		mp.series_number,
                          mp.subseries_title,		mp.chapter,					mp.subchapter,					mp.title,
                          mp.abstract,				mp.larger_work_type_id,		mp.larger_work_title,			mp.larger_work_subtype_id,
                          mp.conference_title,		mp.conference_date,			mp.conference_location,			mp.language,
                          mp.publisher,				mp.publisher_location,		mp.doi_name,					mp.issn,
                          mp.isbn,					mp.collaboration,			mp.usgs_citation,				mp.contact_id,
                          mp.product_description,	mp.start_page,				mp.end_page,					mp.number_of_pages,
                          mp.online_only,			mp.additional_online_files,	mp.temporal_start,				mp.temporal_end,
                          mp.notes,					mp.ipds_id,					mp.ipds_review_process_state,	mp.ipds_internal_id,
                          mp.scale,					mp.projection,				mp.datum,						mp.country,
                          mp.state,					mp.county,					mp.city,						mp.other_geospatial,
                          mp.geographic_extents,	mp.volume,					mp.issue,
                          mp.insert_date, 			mp.insert_username, 		sysdate, 						audit_trail_util.get_username)
    </update>

    <delete id="delete" parameterType="Integer">
        delete from mp_publication
         where publication_id = #{value,jdbcType=NUMERIC}
    </delete>

</mapper>
